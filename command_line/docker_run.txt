# docker run 命令用于运行一个容器
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

# OPTIONS
--name string
   为容器分配一个名称
-d,--detach
   让容器在后台运行
-i,--interactive
   打开STDIN，即使没有链接到虚拟终端
-t,--tty
   为容器分配一个虚拟终端
--link <name|id>[:alias]
   添加一个到其他容器的链接，并且可以为该链接指定一个别名
--pid string
   为容器指定一个PID命令空间
--cidfile string
   将新容器的ID写入指定文件
--read-only
   将容器的根文件系统设为只读
-v string
   从主机挂载一个可写的目录
--tmpfs string
   给容器提供常驻内存的临时文件系统
-e,--env list
   注入环境变量
--restart string
   指定容器自动重启的策略
--entrypoint string
   指定要运行的入口点程序
--rm
   容器退出后自动删除
--mount
   将文件系统挂载到容器
--hostname <string>
   指定容器的主机名，默认为容器名称
--network <network>
   将容器连接到指定网络
-p,--publish <list>
   将容器中的一个端口发布到主机上
   比如：0.0.0.0:8080:8080/tcp 意味着 主机接口:主机端口:目标端口/端口协议
--dns <list>
   设置容器网络的DNS服务器地址，注意必须时IP地址
--dns-search <list>
   指定DNS搜索域名，类似于默认的主机后缀名。
   比如指定--dns-search docker.com，如果搜索域名hub，则自动搜索hub.docker.com
--add-host <list>
   直接添加主机和IP的映射关键，格式为host:ip
-m,--memroy <bytes>
   限制容器的内存大小，可选单位：b、k、m、g
-c,--cpu-shares <int>
   设置各容器键的CPU相对权重
--cpuset-cpus
   将容器的运行绑定在特定的CPU上，比如：
   0表示运行在0号CPU上
   0-3表示运行在0到3号CPU上
   0,1表示运行0号和1号CPU上
--device <list>
   将主机上的设备暴露给容器使用，格式：主机设备:容器设备位置:权限
   默认权限时rwm：read、write、mknod
-- ipc <string>
   指定使用的IPC模式

# 用例一：在后台运行一个nginx
docker run -d --name nginx-service nginx:lastest

# 用例二：启动一个busybox
# 通过 -i 将STDIN链接到虚拟终端
# 通过 -t 分配一个新的虚拟终端
# 通过 --link 链接到名为 nginx-web 的容器
# 在容器中执行 /bin/sh 命令
docker run --name nginx-test -it --link nginx-server:web busybox:1.29 /bin/sh

# 用例三
# 启动一个新的容器并执行ps命令列出当前计算器上的所有进程
docker run --pid host busybox:1.29 ps

# 用例四：运行 wordpress:5.0.0-php7.2-apache 镜像
# 通过 --link 创建到容器 wpdb 的链接
# 通过 -p 将容器的 80 端口绑定到主机的 8000 端口
# 通过 --read-only 将容器的根文件系统设为只读
# 通过 -v 从主机挂载一个可写目录
# 通过 --tmpfs 给容器提供常驻内存的临时文件系统
docker create --link wpdb:mysql -p 8000:80 --read-only -v /run/apache2/ --tmpfs /tmp wordpress:5.0.0-php7.2-apache

# 用例五：启动一个mysql数据库
# 通过 -e 设置容器环境变量，此处为指定root用户密码
docker run -d --name wpdb -e MYSQL_ROOT_PASSWORD=ch2demo mysql:5.7

# 用例六：查看容器的环境变量
# 通过 -e 注入环境变量，并查看容器的环境变量
# 通过 env 命令查看容器中的环境变量
docker run -e MY_ENVIRONMENT_VAR="this is a test" busybox:1.29 env

# 用例七：创建一个始终重启并打印时间的容器
docker run -d --name backoff-detector --restart always busybox:1.29 date

# 用例八：指定入口点程序
# 使用 cat 作为入口点
# 将默认的入口点脚本的完整路径作为参数传递给cat
docker run --entrypoint cat wordpress:5.0.0-php7.2-apache /usr/local/bin/docker-entrypoint.sh

# 例九
# 启动一个容器并在退出后立即删除容器
docker run --rm --name auto-exit-test busybox:1.29 echo HelloWorld
